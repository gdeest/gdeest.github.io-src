----
title: Nix-based PureScript environment
author: Ga√´l Deest
----

This post describes how to quickly setup a PureScript project with Nix, based on
[easy-purescript-nix](https://github.com/justinwoo/easy-purescript-nix). These
rough notes are mostly intended for myself, but published in the hope that they
might be useful to someone else as well.

If you are only interested in the end result, you can find a project skeleton
[on GitHub](https://github.com/gdeest/purescript-skeleton).

## Step 1: Install niv

I have fallen in love with [niv](https://github.com/nmattia/niv) for managing
external dependencies in Nix projects. Here I only use it to provision
easy-purescript-nix, so this is a bit overkill. Still, it comes with a
sensible project structure and makes it so easy to add/drop/update dependencies,
all pinned to specific revisions (including nixpkgs), that I don't see any
reason not to use it. Moreover:

* While you don't know it today, you might need other dependencies later on.
* You can always use niv to set up the initial project and drop the dependence
  after the fact, then tweaking the generated nix files to your heart's content.
  It is all very simple ; you are not really committing to any particular tool
  or philosophy.

You can install niv with:
```text
$ nix-env -iA niv -f https://github.com/nmattia/niv/tarball/master
```

## Step 2: Create the niv project

Once niv is installed, you can create a project with:
```text
$ mkdir project-skeleton
$ cd project-skeleton
$ niv init
```
(Of course, you should replace `project-skeleton` with the name of your project).

## Step 3: Add the easy-purescript-nix dependence

Then, add the easy-purescript-nix dependence with:
```text
$ niv add justinwoo/easy-purescript-nix
```
niv should automatically use the latest revision from the `master` branch, and
pin it in `nix/versions.json`.

## Step 4: Add tools to `shell.nix`

The default `shell.nix` file generated by niv should look something like this:
```python
with { pkgs = import ./nix {}; };
pkgs.mkShell
  { buildInputs = [ pkgs.niv ];
  }
```

To work on PureScript project, we will need:

* `purs`, the PureScript compiler.
* `spago`, a tool to manage and override PureScript dependencies.
* `node`, in order to run the compiled JavaScript code.

(Note: you might want to remove the nodejs dependence later on, but we will keep
it for now to check that everything went fine. Even if you are working on
client-side code, the node runtime might prove useful to run tests and such.)

We can do this by modifying the file to:
```python
with rec
  { pkgs = import ./nix {};
    sources = import ./nix/sources.nix;
    easyPS = (import sources.easy-purescript-nix).inputs;
  };
pkgs.mkShell
  { buildInputs = [ pkgs.niv pkgs.nodejs easyPS.purs easyPS.spago ];
  }
```
(Alternatively, we could define an overlay in `nix/default.nix`.)

If all went well, you should be able to enter the nix environment by typing:
```text
$ nix-shell
```
We can check that the requested tools are indeed in scope:
```text
$ purs --version
0.12.3

$ spago version
0.7.2.0

$ node --version
v8.15.1
```
We are almost ready to go!

## Step 5: Initialize PureScript project with spago

From within the `nix-shell`, enter the following command:
```text
$ spago init
Set up a local Spago project.
Try running `spago install`
```
This command initializes a bare PureScript project. It creates a dummy `src/Main.purs` file which looks like this:

```haskell
module Main where

import Prelude

import Effect (Effect)
import Effect.Console (log)

main :: Effect Unit
main = do
  log "üçù"
```
For testing purposes, I suggest that you change üçù (the emoticon for spaghettis) to something that displays well in a terminal (I will just use ‚ÄúHello world!‚Äù).

`spago init` also creates a `packages.dhall` file where you can declare PureScript dependencies. You can install said dependencies in your local environment with `spago install`:
```text
$ spago install
Installing 3 dependencies.
Installing "prelude"
Installing "console"
Installing "effect"
Installation complete.
```
You should re-run this command whenever you make changes to `package.dhall`.

Finally, you can compile the PureScript program to some `index.js` file with `spago bundle`:
```text
$ spago bundle
Installation complete.
Build succeeded.
Bundle succeeded and output file to index.js
```
There are different ways to build/bundle/package your code, I encourage you to read [the documentation](https://github.com/spacchetti/spago#building-and-testing-a-project) for further details.

## Step 6: Check that everything works

To check that everything went well, just run the output JavaScript with `node`:
```text
$ node index.js
Hello, world!
```

You are ready to go !
